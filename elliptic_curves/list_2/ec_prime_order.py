# This file was *autogenerated* from the file ec-prime-order.sage
from sage.all_cmdline import *  # import sage library

_sage_const_4 = Integer(4)
_sage_const_3 = Integer(3)
_sage_const_27 = Integer(27)
_sage_const_2 = Integer(2)
_sage_const_0 = Integer(0)
_sage_const_1 = Integer(1)


def generatePrimeOrderCurve(field):
    primeOrderCurveNotGenerated = True
    while primeOrderCurveNotGenerated:
        a = field.random_element()
        b = field.random_element()
        determinant = _sage_const_4 * a ** _sage_const_3 + _sage_const_27 * b ** _sage_const_2
        if determinant != _sage_const_0:
            E = EllipticCurve(field, [a, b])
            curveOrder = E.cardinality('pari')
            primeOrderCurveNotGenerated = not is_pseudoprime(curveOrder)
    return E, curveOrder


def generateDomainParameters(bitLength):
    p = random_prime(_sage_const_2 ** bitLength - _sage_const_1, False, _sage_const_2 ** (bitLength - _sage_const_1))
    field = GF(p)
    E, curveOrder = generatePrimeOrderCurve(field)
    basePoint = E.random_element()
    checkResult = curveOrder * basePoint

    if (checkResult == E(_sage_const_0)):
        print(E)
        print('Order of the curve: {}'.format(curveOrder))
        print('Basepoint in normalized projective coordinates: {}'.format(basePoint))
        return E, curveOrder, basePoint
